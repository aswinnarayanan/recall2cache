name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Which part of the version to increment'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      notes:
        description: 'Manual release notes (optional). If blank, will be auto-generated.'
        required: false

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            filename: recall2cache
            archive_cmd: tar -czvf
            archive_ext: .tar.gz
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: '1.25'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -o ${{ matrix.filename }}

      - name: Create archive
        run: |
          ${{ matrix.archive_cmd }} ${{ matrix.filename }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.archive_ext }} ${{ matrix.filename }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.filename }}-artifact
          path: ${{ matrix.filename }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.archive_ext }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: artifacts
          pattern: '*-artifact'

      - name: Debug artifact download
        run: |
          echo "Listing contents of artifacts directory:"
          ls -la artifacts
          echo "Listing all files recursively:"
          find artifacts -type f

      - name: Prepare release assets
        run: |
          mkdir -p release
          cp artifacts/* release/

      - name: Determine Version
        id: version
        run: |
          VERSION_PAYLOAD=""
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            git fetch --tags
            LATEST_TAG=$(git tag -l --sort=-v:refname "v*.*.*" | head -n 1)
            if [ -z "$LATEST_TAG" ]; then
              NEW_VERSION="v0.1.0"
            else
              VERSION_STRING=${LATEST_TAG#v}
              MAJOR=$(echo $VERSION_STRING | cut -d. -f1)
              MINOR=$(echo $VERSION_STRING | cut -d. -f2)
              PATCH=$(echo $VERSION_STRING | cut -d. -f3)
              case "${{ inputs.version_increment }}" in
                major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
                minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
                patch) PATCH=$((PATCH + 1)) ;;
              esac
              NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
            fi
            VERSION_PAYLOAD=$NEW_VERSION
          else
            VERSION_PAYLOAD="${{ github.ref_name }}"
          fi
          echo "version_number=$VERSION_PAYLOAD" >> "$GITHUB_OUTPUT"

      - name: Create and push tag for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.version_number }}
          git push origin ${{ steps.version.outputs.version_number }}

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NOTES_ARG=""
          if [ -n "${{ inputs.notes }}" ]; then
            NOTES_ARG="--notes"
          else
            NOTES_ARG="--generate-notes"
          fi
          gh release create "${{ steps.version.outputs.version_number }}" \
            --title "Release ${{ steps.version.outputs.version_number }}" \
            $NOTES_ARG "${{ inputs.notes }}" \
            release/*